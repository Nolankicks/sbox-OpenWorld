@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent;
@namespace Kicks
@if (Inventory is not null && Player is not null && AmmoContainer is not null)
{
	<root style="opacity: @opacity;">
	<div class="crosshair"></div>
	<div class="invholder">
		@for (int i = 0; i < Inventory.Slots; i++)
		{
			<div class="slot @(Inventory.ActiveSlot == i ? "active" : "")">
				@if (Inventory.ItemTextures[i] is not null)
				{
					<img src="@Inventory.ItemTextures[i].ResourcePath" />
				}
			</div>
		}
	</div>
	<InteractionHudPanel></InteractionHudPanel>
	<div class="health">
		@Player.Health
	</div>
	<div class="ammo">
		@if (AmmoContainer is not null && Inventory is not null && Inventory.Items[Inventory.ActiveSlot] is not null)
		{
			@if (Inventory.Items[Inventory.ActiveSlot].Components.Get<Weapon>() is not null)
		{
			var weapon = Inventory.Items[Inventory.ActiveSlot].Components.Get<Weapon>();
			@if (weapon.AmmoType == AmmoContainer.AmmoTypes.LightAmmo)
			{
				 <div>@weapon.Ammo / @AmmoContainer.LightAmmo</div>
			}
			else if (weapon.AmmoType == AmmoContainer.AmmoTypes.HeavyAmmo)
			{
				<div>@weapon.Ammo / @AmmoContainer.HeavyAmmo</div>
			}
		}
		else if (Inventory.Items[Inventory.ActiveSlot].Components.Get<Shotgun>() is not null)
		{
			var shotgun = Inventory.Items[Inventory.ActiveSlot].Components.Get<Shotgun>();
			<div>@shotgun.Ammo / @AmmoContainer.ShotgunShells</div>
		}
		}
	</div>
</root>
}

@code
{

	public PlayerController Player;
	public AmmoContainer AmmoContainer;
	public Inventory Inventory;
	[Property] public float opacity { get; set; } = 1;
	protected override void OnStart()
	{
		Inventory = Scene.GetAllComponents<Inventory>().FirstOrDefault( x => !x.IsProxy );
		Player = Scene.GetAllComponents<PlayerController>().FirstOrDefault( x => !x.IsProxy );
		AmmoContainer = Scene.GetAllComponents<AmmoContainer>().FirstOrDefault( x => !x.IsProxy );
	}

	protected override void OnUpdate()
	{
		Inventory = Scene.GetAllComponents<Inventory>().FirstOrDefault( x => !x.IsProxy );
		Player = Scene.GetAllComponents<PlayerController>().FirstOrDefault( x => !x.IsProxy );
		AmmoContainer = Scene.GetAllComponents<AmmoContainer>().FirstOrDefault( x => !x.IsProxy );
	}

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine( Time.Now );
}
